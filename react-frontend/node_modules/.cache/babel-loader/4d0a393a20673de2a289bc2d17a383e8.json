{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN Chat-App\\\\react-frontend\\\\src\\\\components\\\\SingleChat.js\",\n    _s = $RefreshSig$();\n\nimport { IconButton } from \"@chakra-ui/button\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { getSender, getSenderDetails } from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport ProfileModal from \"./Modals/ProfileModal\";\nimport UpdateGroupChatModal from \"./Modals/UpdateGroupChatModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SingleChat(_ref) {\n  _s();\n\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const toast = useToast();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState();\n  const {\n    user,\n    setSelectedChat,\n    selectedChat\n  } = ChatState();\n  useEffect(() => {\n    fetchMessage();\n  }, [selectedChat]);\n\n  const fetchMessage = () => {\n    if (!selectedChat) return;\n    setLoading(true);\n    axios.get(`/api/message/${selectedChat._id}`, {\n      headers: {\n        Authorization: `Bearer ${user.token}`\n      }\n    }).then(response => {\n      console.log(response.data);\n      setMessages(response.data);\n      setLoading(false);\n    }).catch(error => {\n      toast({\n        title: \"Error Occured !\",\n        description: \"Failed to load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    });\n  };\n\n  const sendMessage = event => {\n    if (event.key === \"Enter\" && newMessage) {\n      setNewMessage(\"\");\n      axios.post(\"/api/message\", {\n        content: newMessage,\n        chatId: selectedChat._id\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`\n        }\n      }).then(response => {\n        console.log(response);\n        setMessages([...messages, response.data]);\n      }).catch(error => {\n        console.log(\"error\", error);\n        toast({\n          title: \"Error Occured !\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      });\n    }\n  };\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\" \", getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderDetails(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Spinner, {\n            size: \"xl\",\n            w: 20,\n            h: 20,\n            alignSelf: \"center\",\n            margin: \"auto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \" Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          isRequired: true,\n          mt: 3,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message\",\n            onChange: typingHandler,\n            value: newMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        d: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        h: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"3xl\",\n          pb: 3,\n          fontFamily: \"Work sans\",\n          children: \"Click on a user to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n}\n\n_s(SingleChat, \"BBigSDhXZ7zN/nGKeN8AFr6iTvc=\", false, function () {\n  return [useToast];\n});\n\n_c = SingleChat;\nexport default SingleChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"sources":["D:/MERN Chat-App/react-frontend/src/components/SingleChat.js"],"names":["IconButton","FormControl","ArrowBackIcon","Input","Box","Text","Spinner","useToast","axios","React","useEffect","useState","getSender","getSenderDetails","ChatState","ProfileModal","UpdateGroupChatModal","SingleChat","fetchAgain","setFetchAgain","toast","messages","setMessages","loading","setLoading","newMessage","setNewMessage","user","setSelectedChat","selectedChat","fetchMessage","get","_id","headers","Authorization","token","then","response","console","log","data","catch","error","title","description","status","duration","isClosable","position","sendMessage","event","key","post","content","chatId","typingHandler","e","target","value","base","md","isGroupChat","users","chatName","toUpperCase"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,mBAA1B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,sBAA5C;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;;;;AAEA,SAASC,UAAT,OAAmD;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAA+B;AACjD,QAAMC,KAAK,GAAGb,QAAQ,EAAtB;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,EAA5C;AACA,QAAM;AAAEgB,IAAAA,IAAF;AAAQC,IAAAA,eAAR;AAAyBC,IAAAA;AAAzB,MAA0Cf,SAAS,EAAzD;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACD,YAAD,CAFM,CAAT;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACzB,QAAI,CAACD,YAAL,EAAmB;AAEnBL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAhB,IAAAA,KAAK,CACFuB,GADH,CACQ,gBAAeF,YAAY,CAACG,GAAI,EADxC,EAC2C;AACvCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASP,IAAI,CAACQ,KAAM;AAD7B;AAD8B,KAD3C,EAMGC,IANH,CAMSC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAlB,MAAAA,WAAW,CAACe,QAAQ,CAACG,IAAV,CAAX;AACAhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVH,EAWGiB,KAXH,CAWUC,KAAD,IAAW;AAChBtB,MAAAA,KAAK,CAAC;AACJuB,QAAAA,KAAK,EAAE,iBADH;AAEJC,QAAAA,WAAW,EAAE,6BAFT;AAGJC,QAAAA,MAAM,EAAE,OAHJ;AAIJC,QAAAA,QAAQ,EAAE,IAJN;AAKJC,QAAAA,UAAU,EAAE,IALR;AAMJC,QAAAA,QAAQ,EAAE;AANN,OAAD,CAAL;AAQD,KApBH;AAqBD,GAzBD;;AA2BA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAd,IAAyB1B,UAA7B,EAAyC;AACvCC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAlB,MAAAA,KAAK,CACF4C,IADH,CAEI,cAFJ,EAGI;AAAEC,QAAAA,OAAO,EAAE5B,UAAX;AAAuB6B,QAAAA,MAAM,EAAEzB,YAAY,CAACG;AAA5C,OAHJ,EAII;AACEC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAG,UAASP,IAAI,CAACQ,KAAM;AAF7B;AADX,OAJJ,EAWGC,IAXH,CAWSC,QAAD,IAAc;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEAf,QAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcgB,QAAQ,CAACG,IAAvB,CAAD,CAAX;AACD,OAfH,EAgBGC,KAhBH,CAgBUC,KAAD,IAAW;AAChBJ,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,KAArB;AACAtB,QAAAA,KAAK,CAAC;AACJuB,UAAAA,KAAK,EAAE,iBADH;AAEJC,UAAAA,WAAW,EAAE,4BAFT;AAGJC,UAAAA,MAAM,EAAE,OAHJ;AAIJC,UAAAA,QAAQ,EAAE,IAJN;AAKJC,UAAAA,UAAU,EAAE,IALR;AAMJC,UAAAA,QAAQ,EAAE;AANN,SAAD,CAAL;AAQD,OA1BH;AA2BD;AACF,GA/BD;;AAgCA,QAAMO,aAAa,GAAIC,CAAD,IAAO;AAC3B9B,IAAAA,aAAa,CAAC8B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACD,GAFD;;AAGA,sBACE;AAAA,cACG7B,YAAY,gBACX;AAAA,8BACE,QAAC,IAAD;AACE,QAAA,QAAQ,EAAE;AAAE8B,UAAAA,IAAI,EAAE,MAAR;AAAgBC,UAAAA,EAAE,EAAE;AAApB,SADZ;AAEE,QAAA,EAAE,EAAE,CAFN;AAGE,QAAA,EAAE,EAAE,CAHN;AAIE,QAAA,CAAC,EAAC,MAJJ;AAKE,QAAA,UAAU,EAAC,WALb;AAME,QAAA,CAAC,EAAC,MANJ;AAOE,QAAA,cAAc,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR,SAPlB;AAQE,QAAA,UAAU,EAAC,QARb;AAAA,gCAUE,QAAC,UAAD;AACE,UAAA,CAAC,EAAE;AAAEA,YAAAA,IAAI,EAAE,MAAR;AAAgBC,YAAAA,EAAE,EAAE;AAApB,WADL;AAEE,UAAA,IAAI,eAAE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,kBAFR;AAGE,UAAA,OAAO,EAAE,MAAMhC,eAAe,CAAC,EAAD;AAHhC;AAAA;AAAA;AAAA;AAAA,gBAVF,EAeG,CAACC,YAAY,CAACgC,WAAd,gBACC;AAAA,qBACG,GADH,EAEGjD,SAAS,CAACe,IAAD,EAAOE,YAAY,CAACiC,KAApB,CAFZ,eAGE,QAAC,YAAD;AACE,YAAA,IAAI,EAAEjD,gBAAgB,CAACc,IAAD,EAAOE,YAAY,CAACiC,KAApB;AADxB;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA,wBADD,gBASC;AAAA,qBACGjC,YAAY,CAACkC,QAAb,CAAsBC,WAAtB,EADH,eAEE,QAAC,oBAAD;AACE,YAAA,UAAU,EAAE9C,UADd;AAEE,YAAA,aAAa,EAAEC;AAFjB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,wBAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAkCE,QAAC,GAAD;AACE,QAAA,CAAC,EAAC,MADJ;AAEE,QAAA,OAAO,EAAC,QAFV;AAGE,QAAA,cAAc,EAAC,UAHjB;AAIE,QAAA,CAAC,EAAE,CAJL;AAKE,QAAA,EAAE,EAAC,SALL;AAME,QAAA,CAAC,EAAC,MANJ;AAOE,QAAA,CAAC,EAAC,MAPJ;AAQE,QAAA,YAAY,EAAC,IARf;AASE,QAAA,SAAS,EAAC,QATZ;AAAA,mBAWGI,OAAO,gBACN;AAAA,iCACE,QAAC,OAAD;AACE,YAAA,IAAI,EAAC,IADP;AAEE,YAAA,CAAC,EAAE,EAFL;AAGE,YAAA,CAAC,EAAE,EAHL;AAIE,YAAA,SAAS,EAAC,QAJZ;AAKE,YAAA,MAAM,EAAC;AALT;AAAA;AAAA;AAAA;AAAA;AADF,yBADM,gBAWN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBJ,eAwBE,QAAC,WAAD;AAAa,UAAA,SAAS,EAAE0B,WAAxB;AAAqC,UAAA,UAAU,MAA/C;AAAgD,UAAA,EAAE,EAAE,CAApD;AAAA,iCACE,QAAC,KAAD;AACE,YAAA,OAAO,EAAC,QADV;AAEE,YAAA,EAAE,EAAC,SAFL;AAGE,YAAA,WAAW,EAAC,iBAHd;AAIE,YAAA,QAAQ,EAAEM,aAJZ;AAKE,YAAA,KAAK,EAAE9B;AALT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlCF;AAAA,oBADW,gBAuEX;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,CAAC,EAAC,MAAP;AAAc,QAAA,UAAU,EAAC,QAAzB;AAAkC,QAAA,cAAc,EAAC,QAAjD;AAA0D,QAAA,CAAC,EAAC,MAA5D;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAC,KAAf;AAAqB,UAAA,EAAE,EAAE,CAAzB;AAA4B,UAAA,UAAU,EAAC,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAxEJ,mBADF;AAmFD;;GA3JQR,U;UACOV,Q;;;KADPU,U;AA6JT,eAAeA,UAAf","sourcesContent":["import { IconButton } from \"@chakra-ui/button\";\r\nimport { FormControl } from \"@chakra-ui/form-control\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getSender, getSenderDetails } from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport ProfileModal from \"./Modals/ProfileModal\";\r\nimport UpdateGroupChatModal from \"./Modals/UpdateGroupChatModal\";\r\n\r\nfunction SingleChat({ fetchAgain, setFetchAgain }) {\r\n  const toast = useToast();\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState();\r\n  const { user, setSelectedChat, selectedChat } = ChatState();\r\n  useEffect(() => {\r\n    fetchMessage();\r\n  }, [selectedChat]);\r\n\r\n  const fetchMessage = () => {\r\n    if (!selectedChat) return;\r\n\r\n    setLoading(true);\r\n    axios\r\n      .get(`/api/message/${selectedChat._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setMessages(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        toast({\r\n          title: \"Error Occured !\",\r\n          description: \"Failed to load the Messages\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const sendMessage = (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      setNewMessage(\"\");\r\n      axios\r\n        .post(\r\n          \"/api/message\",\r\n          { content: newMessage, chatId: selectedChat._id },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${user.token}`,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n\r\n          setMessages([...messages, response.data]);\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"error\", error);\r\n          toast({\r\n            title: \"Error Occured !\",\r\n            description: \"Failed to send the Message\",\r\n            status: \"error\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom\",\r\n          });\r\n        });\r\n    }\r\n  };\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n  };\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {!selectedChat.isGroupChat ? (\r\n              <>\r\n                {\" \"}\r\n                {getSender(user, selectedChat.users)}\r\n                <ProfileModal\r\n                  user={getSenderDetails(user, selectedChat.users)}\r\n                />\r\n              </>\r\n            ) : (\r\n              <>\r\n                {selectedChat.chatName.toUpperCase()}\r\n                <UpdateGroupChatModal\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                />\r\n              </>\r\n            )}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <>\r\n                <Spinner\r\n                  size=\"xl\"\r\n                  w={20}\r\n                  h={20}\r\n                  alignSelf=\"center\"\r\n                  margin=\"auto\"\r\n                />\r\n              </>\r\n            ) : (\r\n              <div> Messages</div>\r\n            )}\r\n            <FormControl onKeyDown={sendMessage} isRequired mt={3}>\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message\"\r\n                onChange={typingHandler}\r\n                value={newMessage}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n            <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n              Click on a user to start chatting\r\n            </Text>\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SingleChat;\r\n"]},"metadata":{},"sourceType":"module"}