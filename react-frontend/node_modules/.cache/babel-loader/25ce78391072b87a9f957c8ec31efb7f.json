{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN Chat-App\\\\react-frontend\\\\src\\\\components\\\\MyChats.js\",\n    _s = $RefreshSig$();\n\nimport { Button } from \"@chakra-ui/button\";\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport ChatLoading from \"./ChatLoading\"; //Displaying the list of users with latest chats\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MyChats() {\n  _s();\n\n  const toast = useToast();\n  const {\n    user,\n    setUser,\n    selectedChat,\n    setSelectedChat,\n    chats,\n    setChats\n  } = ChatState();\n  const [loggedUser, setLoggedUser] = useState(); // To fetch the latest chats\n\n  const fetchChats = () => {\n    axios.get(\"/api/chat\", {\n      headers: {\n        Authorization: `Bearer ${user.token}`\n      }\n    }).then(response => {\n      setChats(response.data);\n    }).catch(error => {\n      toast({\n        title: \"Something went wrong\",\n        description: \"Failed to load the chat\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom-left\"\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchChats();\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    d: {\n      base: selectedChat ? \"none\" : \"flex\",\n      md: \"flex\"\n    },\n    flexDir: \"column\",\n    alignItems: \"center\",\n    p: 3,\n    bg: \"white\",\n    w: {\n      base: \"100%\",\n      md: \"31%\"\n    },\n    borderRadius: \"lg\",\n    borderWidth: \"1px\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      pb: 3,\n      px: 3,\n      fontSize: {\n        base: \"28px\",\n        md: \"30px\"\n      },\n      fontFamily: \"Work sans\",\n      d: \"flex\",\n      w: \"100%\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: \"My Chats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      d: \"flex\",\n      flexDir: \"column\",\n      p: 3,\n      bg: \"#F8F8F8\",\n      w: \"100%\",\n      h: \"100%\",\n      borderRadius: \"lg\",\n      overflowY: \"hidden\",\n      children: chats ? /*#__PURE__*/_jsxDEV(Stack, {\n        overflowY: \"scroll\",\n        children: chats.map(chat => /*#__PURE__*/_jsxDEV(Box, {\n          onClick: () => setSelectedChat(chat),\n          cursor: \"pointer\",\n          bg: selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\",\n          color: selectedChat === chat ? \"white\" : \"black\",\n          px: 3,\n          py: 2,\n          borderRadius: \"lg\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: !chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this), chat.latestMessage && /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"xs\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: [chat.latestMessage.sender.name, \" : \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 21\n            }, this), chat.latestMessage.content.length > 50 ? chat.latestMessage.content.substring(0, 51) + \"...\" : chat.latestMessage.content]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }, this)]\n        }, chat._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChatLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyChats, \"AFzNdJlT2GAmAZ7bvgf1r6JhhjI=\", false, function () {\n  return [useToast];\n});\n\n_c = MyChats;\nexport default MyChats;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyChats\");","map":{"version":3,"sources":["D:/MERN Chat-App/react-frontend/src/components/MyChats.js"],"names":["Button","AddIcon","Box","Stack","Text","useToast","axios","React","useEffect","useState","getSender","ChatState","ChatLoading","MyChats","toast","user","setUser","selectedChat","setSelectedChat","chats","setChats","loggedUser","setLoggedUser","fetchChats","get","headers","Authorization","token","then","response","data","catch","error","title","description","status","duration","isClosable","position","JSON","parse","localStorage","getItem","base","md","map","chat","isGroupChat","users","chatName","latestMessage","sender","name","content","length","substring","_id"],"mappings":"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","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport ChatLoading from \"./ChatLoading\";\r\n\r\n//Displaying the list of users with latest chats\r\nfunction MyChats() {\r\n  const toast = useToast();\r\n  const { user, setUser, selectedChat, setSelectedChat, chats, setChats } =\r\n    ChatState();\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  // To fetch the latest chats\r\n  const fetchChats = () => {\r\n    axios\r\n      .get(\"/api/chat\", {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setChats(response.data);\r\n      })\r\n      .catch((error) => {\r\n        toast({\r\n          title: \"Something went wrong\",\r\n          description: \"Failed to load the chat\",\r\n          status: \"error\",\r\n          duration: 2000,\r\n          isClosable: true,\r\n          position: \"bottom-left\",\r\n        });\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchChats();\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n  }, []);\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        {/* <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal> */}\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {/* List of chats with everyone */}\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default MyChats;\r\n"]},"metadata":{},"sourceType":"module"}